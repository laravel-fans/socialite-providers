{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Laravel Socialite Providers","title":"index"},{"location":"#laravel-socialite-providers","text":"","title":"Laravel Socialite Providers"},{"location":"coding/","text":"1. Installation // This assumes that you have composer installed globally composer require laravel-socialite-providers/coding 2. Service Provider Remove Laravel\\Socialite\\SocialiteServiceProvider from your providers[] array in config\\app.php if you have added it already. Add \\SocialiteProviders\\Manager\\ServiceProvider::class to your providers[] array in config\\app.php . For example: 'providers' = [ // a whole bunch of providers // remove 'Laravel\\Socialite\\SocialiteServiceProvider', \\SocialiteProviders\\Manager\\ServiceProvider::class, // add ]; Note: If you would like to use the Socialite Facade, you need to install it. 3. Event Listener Add SocialiteProviders\\Manager\\SocialiteWasCalled event to your listen[] array in app/Providers/EventServiceProvider . Add your listeners (i.e. the ones from the providers) to the SocialiteProviders\\Manager\\SocialiteWasCalled[] that you just created. The listener that you add for this provider is 'LaravelSocialiteProviders\\\\Coding\\\\CodingExtendSocialite@handle', . Note: You do not need to add anything for the built-in socialite providers unless you override them with your own providers. For example: /** * The event handler mappings for the application. * * @var array */ protected $listen = [ \\SocialiteProviders\\Manager\\SocialiteWasCalled::class = [ // add your listeners (aka providers) here 'LaravelSocialiteProviders\\\\Coding\\\\CodingExtendSocialite@handle', ], ]; Reference Laravel docs about events Laracasts video on events in Laravel 5 4. Configuration setup You will need to add an entry to the services configuration file so that after config files are cached for usage in production environment (Laravel command artisan config:cache ) all config is still available. Add to config/services.php . 'coding' = [ 'client_id' = env('CODING_CLIENT_ID'), 'client_secret' = env('CODING_CLIENT_SECRET'), 'redirect' = env('CODING_CALLBACK_URL'), 'guzzle' = [ 'base_uri' = 'https://' . env('CODING_TEAM') . '.coding.net/', ], 'scopes' = preg_split('/,/', env('CODING_SCOPES'), null, PREG_SPLIT_NO_EMPTY), // optional, can not use explode, see vlucas/phpdotenv#175 ], 5. Usage Laravel docs on configuration You should now be able to use it like you would regularly use Socialite (assuming you have the facade installed): return Socialite::with('coding')- redirect(); Lumen Support You can use Socialite providers with Lumen. Just make sure that you have facade support turned on and that you follow the setup directions properly. Note: If you are using this with Lumen, all providers will automatically be stateless since Lumen does not keep track of state. Also, configs cannot be parsed from the services[] in Lumen. You can only set the values in the .env file as shown exactly in this document. If needed, you can also override a config (shown below). Stateless You can set whether or not you want to use the provider as stateless. Remember that the OAuth provider (Twitter, Tumblr, etc) must support whatever option you choose. Note: If you are using this with Lumen, all providers will automatically be stateless since Lumen does not keep track of state. // to turn off stateless return Socialite::with('coding')- stateless(false)- redirect(); // to use stateless return Socialite::with('coding')- stateless()- redirect(); Overriding a config If you need to override the providers environment or config variables dynamically anywhere in your application, you may use the following: $clientId = secret ; $clientSecret = secret ; $redirectUrl = http://yourdomain.com/api/redirect ; $additionalProviderConfig = [ // Add additional configuration values here. ]; $config = new \\SocialiteProviders\\Manager\\Config( $clientId, $clientSecret, $redirectUrl, $additionalProviderConfig ); return Socialite::with('coding')- setConfig($config)- redirect(); Retrieving the Access Token Response Body Laravel Socialite by default only allows access to the access_token . Which can be accessed via the \\Laravel\\Socialite\\User- token public property. Sometimes you need access to the whole response body which may contain items such as a refresh_token . You can get the access token response body, after you called the user() method in Socialite, by accessing the property $user- accessTokenResponseBody ; // default use openid as $user- id $user = Socialite::driver('coding')- user(); $accessTokenResponseBody = $user- accessTokenResponseBody; // use unionid as $user- id $user = Socialite::driver('coding')- scopes('unionid')- user(); Retrieving User Details From A Token (OAuth2) If you already have a valid access token for a user, you can retrieve their details using the userFromToken method, but Tencent breaks OAuth2, need set \"openid\" first: $user = Socialite::driver('coding')- setOpenId($openId)- userFromToken($token); Reference Laravel Socialite Docs CODING OAuth","title":"Coding"},{"location":"coding/#1-installation","text":"// This assumes that you have composer installed globally composer require laravel-socialite-providers/coding","title":"1. Installation"},{"location":"coding/#2-service-provider","text":"Remove Laravel\\Socialite\\SocialiteServiceProvider from your providers[] array in config\\app.php if you have added it already. Add \\SocialiteProviders\\Manager\\ServiceProvider::class to your providers[] array in config\\app.php . For example: 'providers' = [ // a whole bunch of providers // remove 'Laravel\\Socialite\\SocialiteServiceProvider', \\SocialiteProviders\\Manager\\ServiceProvider::class, // add ]; Note: If you would like to use the Socialite Facade, you need to install it.","title":"2. Service Provider"},{"location":"coding/#3-event-listener","text":"Add SocialiteProviders\\Manager\\SocialiteWasCalled event to your listen[] array in app/Providers/EventServiceProvider . Add your listeners (i.e. the ones from the providers) to the SocialiteProviders\\Manager\\SocialiteWasCalled[] that you just created. The listener that you add for this provider is 'LaravelSocialiteProviders\\\\Coding\\\\CodingExtendSocialite@handle', . Note: You do not need to add anything for the built-in socialite providers unless you override them with your own providers. For example: /** * The event handler mappings for the application. * * @var array */ protected $listen = [ \\SocialiteProviders\\Manager\\SocialiteWasCalled::class = [ // add your listeners (aka providers) here 'LaravelSocialiteProviders\\\\Coding\\\\CodingExtendSocialite@handle', ], ];","title":"3. Event Listener"},{"location":"coding/#reference","text":"Laravel docs about events Laracasts video on events in Laravel 5","title":"Reference"},{"location":"coding/#4-configuration-setup","text":"You will need to add an entry to the services configuration file so that after config files are cached for usage in production environment (Laravel command artisan config:cache ) all config is still available.","title":"4. Configuration setup"},{"location":"coding/#add-to-configservicesphp","text":"'coding' = [ 'client_id' = env('CODING_CLIENT_ID'), 'client_secret' = env('CODING_CLIENT_SECRET'), 'redirect' = env('CODING_CALLBACK_URL'), 'guzzle' = [ 'base_uri' = 'https://' . env('CODING_TEAM') . '.coding.net/', ], 'scopes' = preg_split('/,/', env('CODING_SCOPES'), null, PREG_SPLIT_NO_EMPTY), // optional, can not use explode, see vlucas/phpdotenv#175 ],","title":"Add to config/services.php."},{"location":"coding/#5-usage","text":"Laravel docs on configuration You should now be able to use it like you would regularly use Socialite (assuming you have the facade installed): return Socialite::with('coding')- redirect();","title":"5. Usage"},{"location":"coding/#lumen-support","text":"You can use Socialite providers with Lumen. Just make sure that you have facade support turned on and that you follow the setup directions properly. Note: If you are using this with Lumen, all providers will automatically be stateless since Lumen does not keep track of state. Also, configs cannot be parsed from the services[] in Lumen. You can only set the values in the .env file as shown exactly in this document. If needed, you can also override a config (shown below).","title":"Lumen Support"},{"location":"coding/#stateless","text":"You can set whether or not you want to use the provider as stateless. Remember that the OAuth provider (Twitter, Tumblr, etc) must support whatever option you choose. Note: If you are using this with Lumen, all providers will automatically be stateless since Lumen does not keep track of state. // to turn off stateless return Socialite::with('coding')- stateless(false)- redirect(); // to use stateless return Socialite::with('coding')- stateless()- redirect();","title":"Stateless"},{"location":"coding/#overriding-a-config","text":"If you need to override the providers environment or config variables dynamically anywhere in your application, you may use the following: $clientId = secret ; $clientSecret = secret ; $redirectUrl = http://yourdomain.com/api/redirect ; $additionalProviderConfig = [ // Add additional configuration values here. ]; $config = new \\SocialiteProviders\\Manager\\Config( $clientId, $clientSecret, $redirectUrl, $additionalProviderConfig ); return Socialite::with('coding')- setConfig($config)- redirect();","title":"Overriding a config"},{"location":"coding/#retrieving-the-access-token-response-body","text":"Laravel Socialite by default only allows access to the access_token . Which can be accessed via the \\Laravel\\Socialite\\User- token public property. Sometimes you need access to the whole response body which may contain items such as a refresh_token . You can get the access token response body, after you called the user() method in Socialite, by accessing the property $user- accessTokenResponseBody ; // default use openid as $user- id $user = Socialite::driver('coding')- user(); $accessTokenResponseBody = $user- accessTokenResponseBody; // use unionid as $user- id $user = Socialite::driver('coding')- scopes('unionid')- user();","title":"Retrieving the Access Token Response Body"},{"location":"coding/#retrieving-user-details-from-a-token-oauth2","text":"If you already have a valid access token for a user, you can retrieve their details using the userFromToken method, but Tencent breaks OAuth2, need set \"openid\" first: $user = Socialite::driver('coding')- setOpenId($openId)- userFromToken($token);","title":"Retrieving User Details From A Token (OAuth2)"},{"location":"coding/#reference_1","text":"Laravel Socialite Docs CODING OAuth","title":"Reference"},{"location":"wechat-service-account/","text":"1. Installation // This assumes that you have composer installed globally composer require laravel-socialitep-roviders/wechat-service-account 2. Service Provider Remove Laravel\\Socialite\\SocialiteServiceProvider from your providers[] array in config\\app.php if you have added it already. Add \\SocialiteProviders\\Manager\\ServiceProvider::class to your providers[] array in config\\app.php . For example: 'providers' = [ // a whole bunch of providers // remove 'Laravel\\Socialite\\SocialiteServiceProvider', \\SocialiteProviders\\Manager\\ServiceProvider::class, // add ]; Note: If you would like to use the Socialite Facade, you need to install it. 3. Event Listener Add SocialiteProviders\\Manager\\SocialiteWasCalled event to your listen[] array in app/Providers/EventServiceProvider . Add your listeners (i.e. the ones from the providers) to the SocialiteProviders\\Manager\\SocialiteWasCalled[] that you just created. The listener that you add for this provider is 'LaravelSocialiteProviders\\\\WeChatServiceAccount\\\\WeChatServiceAccountExtendSocialite@handle', . Note: You do not need to add anything for the built-in socialite providers unless you override them with your own providers. For example: /** * The event handler mappings for the application. * * @var array */ protected $listen = [ \\SocialiteProviders\\Manager\\SocialiteWasCalled::class = [ // add your listeners (aka providers) here 'LaravelSocialiteProviders\\\\WeChatServiceAccount\\\\WeChatServiceAccountExtendSocialite@handle', ], ]; Reference Laravel docs about events Laracasts video on events in Laravel 5 4. Configuration setup You will need to add an entry to the services configuration file so that after config files are cached for usage in production environment (Laravel command artisan config:cache ) all config is still available. Add to config/services.php . 'wechat_service_account' = [ 'client_id' = env('WECHAT_SERVICE_ACCOUNT_APP_ID'), 'client_secret' = env('WECHAT_SERVICE_ACCOUNT_APP_SECRET'), 'redirect' = env('WECHAT_SERVICE_ACCOUNT_CALLBACK_URL'), 'scopes' = preg_split('/,/', env('WECHAT_SERVICE_ACCOUNT_SCOPES'), null, PREG_SPLIT_NO_EMPTY), // can not use explode, see vlucas/phpdotenv#175 'union_id_with' = preg_split('/,/', env('WECHAT_SERVICE_ACCOUNT_UNION_ID_WITH'), null, PREG_SPLIT_NO_EMPTY), ], 5. Usage Laravel docs on configuration You should now be able to use it like you would regularly use Socialite (assuming you have the facade installed): // default need user grant, and then you can get user info(nickname, unionid, openid...) return Socialite::with('wechat_service_account')- redirect(); // not need user grant, and then you can only get openid return Socialite::with('wechat_service_account')- scopes('snsapi_base')- redirect(); Lumen Support You can use Socialite providers with Lumen. Just make sure that you have facade support turned on and that you follow the setup directions properly. Note: If you are using this with Lumen, all providers will automatically be stateless since Lumen does not keep track of state. Also, configs cannot be parsed from the services[] in Lumen. You can only set the values in the .env file as shown exactly in this document. If needed, you can also override a config (shown below). Stateless You can set whether or not you want to use the provider as stateless. Remember that the OAuth provider (Twitter, Tumblr, etc) must support whatever option you choose. Note: If you are using this with Lumen, all providers will automatically be stateless since Lumen does not keep track of state. // to turn off stateless return Socialite::with('wechat_service_account')- stateless(false)- redirect(); // to use stateless return Socialite::with('wechat_service_account')- stateless()- redirect(); Overriding a config If you need to override the providers environment or config variables dynamically anywhere in your application, you may use the following: $clientId = secret ; $clientSecret = secret ; $redirectUrl = http://yourdomain.com/api/redirect ; $additionalProviderConfig = [ // Add additional configuration values here. ]; $config = new \\SocialiteProviders\\Manager\\Config( $clientId, $clientSecret, $redirectUrl, $additionalProviderConfig ); return Socialite::with('wechat_service_account')- setConfig($config)- redirect(); Retrieving the Access Token Response Body Laravel Socialite by default only allows access to the access_token . Which can be accessed via the \\Laravel\\Socialite\\User- token public property. Sometimes you need access to the whole response body which may contain items such as a refresh_token . You can get the access token response body, after you called the user() method in Socialite, by accessing the property $user- accessTokenResponseBody ; // default use openid as $user- id $user = Socialite::driver('wechat_service_account')- user(); $accessTokenResponseBody = $user- accessTokenResponseBody; // use unionid as $user- id $user = Socialite::driver('wechat_service_account')- scopes('unionid')- user(); // not need user grant, you can only get openid $user = Socialite::driver('wechat_service_account')- scopes('snsapi_base')- user(); Retrieving User Details From A Token (OAuth2) If you already have a valid access token for a user, you can retrieve their details using the userFromToken method, but Tencent breaks OAuth2, need set \"openid\" first: $user = Socialite::driver('wechat_service_account')- setOpenId($openId)- userFromToken($token); Reference Laravel Socialite Docs Laracasts Socialite video","title":"WeChatServiceAccount"},{"location":"wechat-service-account/#1-installation","text":"// This assumes that you have composer installed globally composer require laravel-socialitep-roviders/wechat-service-account","title":"1. Installation"},{"location":"wechat-service-account/#2-service-provider","text":"Remove Laravel\\Socialite\\SocialiteServiceProvider from your providers[] array in config\\app.php if you have added it already. Add \\SocialiteProviders\\Manager\\ServiceProvider::class to your providers[] array in config\\app.php . For example: 'providers' = [ // a whole bunch of providers // remove 'Laravel\\Socialite\\SocialiteServiceProvider', \\SocialiteProviders\\Manager\\ServiceProvider::class, // add ]; Note: If you would like to use the Socialite Facade, you need to install it.","title":"2. Service Provider"},{"location":"wechat-service-account/#3-event-listener","text":"Add SocialiteProviders\\Manager\\SocialiteWasCalled event to your listen[] array in app/Providers/EventServiceProvider . Add your listeners (i.e. the ones from the providers) to the SocialiteProviders\\Manager\\SocialiteWasCalled[] that you just created. The listener that you add for this provider is 'LaravelSocialiteProviders\\\\WeChatServiceAccount\\\\WeChatServiceAccountExtendSocialite@handle', . Note: You do not need to add anything for the built-in socialite providers unless you override them with your own providers. For example: /** * The event handler mappings for the application. * * @var array */ protected $listen = [ \\SocialiteProviders\\Manager\\SocialiteWasCalled::class = [ // add your listeners (aka providers) here 'LaravelSocialiteProviders\\\\WeChatServiceAccount\\\\WeChatServiceAccountExtendSocialite@handle', ], ];","title":"3. Event Listener"},{"location":"wechat-service-account/#reference","text":"Laravel docs about events Laracasts video on events in Laravel 5","title":"Reference"},{"location":"wechat-service-account/#4-configuration-setup","text":"You will need to add an entry to the services configuration file so that after config files are cached for usage in production environment (Laravel command artisan config:cache ) all config is still available.","title":"4. Configuration setup"},{"location":"wechat-service-account/#add-to-configservicesphp","text":"'wechat_service_account' = [ 'client_id' = env('WECHAT_SERVICE_ACCOUNT_APP_ID'), 'client_secret' = env('WECHAT_SERVICE_ACCOUNT_APP_SECRET'), 'redirect' = env('WECHAT_SERVICE_ACCOUNT_CALLBACK_URL'), 'scopes' = preg_split('/,/', env('WECHAT_SERVICE_ACCOUNT_SCOPES'), null, PREG_SPLIT_NO_EMPTY), // can not use explode, see vlucas/phpdotenv#175 'union_id_with' = preg_split('/,/', env('WECHAT_SERVICE_ACCOUNT_UNION_ID_WITH'), null, PREG_SPLIT_NO_EMPTY), ],","title":"Add to config/services.php."},{"location":"wechat-service-account/#5-usage","text":"Laravel docs on configuration You should now be able to use it like you would regularly use Socialite (assuming you have the facade installed): // default need user grant, and then you can get user info(nickname, unionid, openid...) return Socialite::with('wechat_service_account')- redirect(); // not need user grant, and then you can only get openid return Socialite::with('wechat_service_account')- scopes('snsapi_base')- redirect();","title":"5. Usage"},{"location":"wechat-service-account/#lumen-support","text":"You can use Socialite providers with Lumen. Just make sure that you have facade support turned on and that you follow the setup directions properly. Note: If you are using this with Lumen, all providers will automatically be stateless since Lumen does not keep track of state. Also, configs cannot be parsed from the services[] in Lumen. You can only set the values in the .env file as shown exactly in this document. If needed, you can also override a config (shown below).","title":"Lumen Support"},{"location":"wechat-service-account/#stateless","text":"You can set whether or not you want to use the provider as stateless. Remember that the OAuth provider (Twitter, Tumblr, etc) must support whatever option you choose. Note: If you are using this with Lumen, all providers will automatically be stateless since Lumen does not keep track of state. // to turn off stateless return Socialite::with('wechat_service_account')- stateless(false)- redirect(); // to use stateless return Socialite::with('wechat_service_account')- stateless()- redirect();","title":"Stateless"},{"location":"wechat-service-account/#overriding-a-config","text":"If you need to override the providers environment or config variables dynamically anywhere in your application, you may use the following: $clientId = secret ; $clientSecret = secret ; $redirectUrl = http://yourdomain.com/api/redirect ; $additionalProviderConfig = [ // Add additional configuration values here. ]; $config = new \\SocialiteProviders\\Manager\\Config( $clientId, $clientSecret, $redirectUrl, $additionalProviderConfig ); return Socialite::with('wechat_service_account')- setConfig($config)- redirect();","title":"Overriding a config"},{"location":"wechat-service-account/#retrieving-the-access-token-response-body","text":"Laravel Socialite by default only allows access to the access_token . Which can be accessed via the \\Laravel\\Socialite\\User- token public property. Sometimes you need access to the whole response body which may contain items such as a refresh_token . You can get the access token response body, after you called the user() method in Socialite, by accessing the property $user- accessTokenResponseBody ; // default use openid as $user- id $user = Socialite::driver('wechat_service_account')- user(); $accessTokenResponseBody = $user- accessTokenResponseBody; // use unionid as $user- id $user = Socialite::driver('wechat_service_account')- scopes('unionid')- user(); // not need user grant, you can only get openid $user = Socialite::driver('wechat_service_account')- scopes('snsapi_base')- user();","title":"Retrieving the Access Token Response Body"},{"location":"wechat-service-account/#retrieving-user-details-from-a-token-oauth2","text":"If you already have a valid access token for a user, you can retrieve their details using the userFromToken method, but Tencent breaks OAuth2, need set \"openid\" first: $user = Socialite::driver('wechat_service_account')- setOpenId($openId)- userFromToken($token);","title":"Retrieving User Details From A Token (OAuth2)"},{"location":"wechat-service-account/#reference_1","text":"Laravel Socialite Docs Laracasts Socialite video","title":"Reference"},{"location":"wechat-web/","text":"1. Installation // This assumes that you have composer installed globally composer require laravel-socialite-providers/socialite-wechat-web 2. Service Provider Remove Laravel\\Socialite\\SocialiteServiceProvider from your providers[] array in config\\app.php if you have added it already. Add \\SocialiteProviders\\Manager\\ServiceProvider::class to your providers[] array in config\\app.php . For example: 'providers' = [ // a whole bunch of providers // remove 'Laravel\\Socialite\\SocialiteServiceProvider', \\SocialiteProviders\\Manager\\ServiceProvider::class, // add ]; Note: If you would like to use the Socialite Facade, you need to install it. 3. Event Listener Add SocialiteProviders\\Manager\\SocialiteWasCalled event to your listen[] array in app/Providers/EventServiceProvider . Add your listeners (i.e. the ones from the providers) to the SocialiteProviders\\Manager\\SocialiteWasCalled[] that you just created. The listener that you add for this provider is 'LaravelSocialiteProviders\\\\WeChatWeb\\\\WeChatWebExtendSocialite@handle', . Note: You do not need to add anything for the built-in socialite providers unless you override them with your own providers. For example: /** * The event handler mappings for the application. * * @var array */ protected $listen = [ \\SocialiteProviders\\Manager\\SocialiteWasCalled::class = [ // add your listeners (aka providers) here 'LaravelSocialiteProviders\\\\WeChatWeb\\\\WeChatWebExtendSocialite@handle', ], ]; Reference Laravel docs about events Laracasts video on events in Laravel 5 4. Configuration setup You will need to add an entry to the services configuration file so that after config files are cached for usage in production environment (Laravel command artisan config:cache ) all config is still available. Add to config/services.php . 'wechat_web' = [ 'client_id' = env('WECHAT_WEB_APP_ID'), 'client_secret' = env('WECHAT_WEB_APP_SECRET'), 'redirect' = env('WECHAT_WEB_CALLBACK_URL'), 'scopes' = preg_split('/,/', env('WECHAT_WEB_SCOPES'), null, PREG_SPLIT_NO_EMPTY), // can not use explode, see vlucas/phpdotenv#175 'union_id_with' = preg_split('/,/', env('WECHAT_WEB_UNION_ID_WITH'), null, PREG_SPLIT_NO_EMPTY), ], 5. Usage Laravel docs on configuration You should now be able to use it like you would regularly use Socialite (assuming you have the facade installed): return Socialite::with('wechat_web')- redirect(); Lumen Support You can use Socialite providers with Lumen. Just make sure that you have facade support turned on and that you follow the setup directions properly. Note: If you are using this with Lumen, all providers will automatically be stateless since Lumen does not keep track of state. Also, configs cannot be parsed from the services[] in Lumen. You can only set the values in the .env file as shown exactly in this document. If needed, you can also override a config (shown below). Stateless You can set whether or not you want to use the provider as stateless. Remember that the OAuth provider (Twitter, Tumblr, etc) must support whatever option you choose. Note: If you are using this with Lumen, all providers will automatically be stateless since Lumen does not keep track of state. // to turn off stateless return Socialite::with('wechat_web')- stateless(false)- redirect(); // to use stateless return Socialite::with('wechat_web')- stateless()- redirect(); Overriding a config If you need to override the providers environment or config variables dynamically anywhere in your application, you may use the following: $clientId = secret ; $clientSecret = secret ; $redirectUrl = http://yourdomain.com/api/redirect ; $additionalProviderConfig = [ // Add additional configuration values here. ]; $config = new \\SocialiteProviders\\Manager\\Config( $clientId, $clientSecret, $redirectUrl, $additionalProviderConfig ); return Socialite::with('wechat_web')- setConfig($config)- redirect(); Retrieving the Access Token Response Body Laravel Socialite by default only allows access to the access_token . Which can be accessed via the \\Laravel\\Socialite\\User- token public property. Sometimes you need access to the whole response body which may contain items such as a refresh_token . You can get the access token response body, after you called the user() method in Socialite, by accessing the property $user- accessTokenResponseBody ; // default use openid as $user- id $user = Socialite::driver('wechat_web')- user(); $accessTokenResponseBody = $user- accessTokenResponseBody; // use unionid as $user- id $user = Socialite::driver('wechat_web')- scopes('unionid')- user(); Retrieving User Details From A Token (OAuth2) If you already have a valid access token for a user, you can retrieve their details using the userFromToken method, but Tencent breaks OAuth2, need set \"openid\" first: $user = Socialite::driver('wechat_web')- setOpenId($openId)- userFromToken($token); Reference Laravel Socialite Docs Laracasts Socialite video","title":"WeChatWeb"},{"location":"wechat-web/#1-installation","text":"// This assumes that you have composer installed globally composer require laravel-socialite-providers/socialite-wechat-web","title":"1. Installation"},{"location":"wechat-web/#2-service-provider","text":"Remove Laravel\\Socialite\\SocialiteServiceProvider from your providers[] array in config\\app.php if you have added it already. Add \\SocialiteProviders\\Manager\\ServiceProvider::class to your providers[] array in config\\app.php . For example: 'providers' = [ // a whole bunch of providers // remove 'Laravel\\Socialite\\SocialiteServiceProvider', \\SocialiteProviders\\Manager\\ServiceProvider::class, // add ]; Note: If you would like to use the Socialite Facade, you need to install it.","title":"2. Service Provider"},{"location":"wechat-web/#3-event-listener","text":"Add SocialiteProviders\\Manager\\SocialiteWasCalled event to your listen[] array in app/Providers/EventServiceProvider . Add your listeners (i.e. the ones from the providers) to the SocialiteProviders\\Manager\\SocialiteWasCalled[] that you just created. The listener that you add for this provider is 'LaravelSocialiteProviders\\\\WeChatWeb\\\\WeChatWebExtendSocialite@handle', . Note: You do not need to add anything for the built-in socialite providers unless you override them with your own providers. For example: /** * The event handler mappings for the application. * * @var array */ protected $listen = [ \\SocialiteProviders\\Manager\\SocialiteWasCalled::class = [ // add your listeners (aka providers) here 'LaravelSocialiteProviders\\\\WeChatWeb\\\\WeChatWebExtendSocialite@handle', ], ];","title":"3. Event Listener"},{"location":"wechat-web/#reference","text":"Laravel docs about events Laracasts video on events in Laravel 5","title":"Reference"},{"location":"wechat-web/#4-configuration-setup","text":"You will need to add an entry to the services configuration file so that after config files are cached for usage in production environment (Laravel command artisan config:cache ) all config is still available.","title":"4. Configuration setup"},{"location":"wechat-web/#add-to-configservicesphp","text":"'wechat_web' = [ 'client_id' = env('WECHAT_WEB_APP_ID'), 'client_secret' = env('WECHAT_WEB_APP_SECRET'), 'redirect' = env('WECHAT_WEB_CALLBACK_URL'), 'scopes' = preg_split('/,/', env('WECHAT_WEB_SCOPES'), null, PREG_SPLIT_NO_EMPTY), // can not use explode, see vlucas/phpdotenv#175 'union_id_with' = preg_split('/,/', env('WECHAT_WEB_UNION_ID_WITH'), null, PREG_SPLIT_NO_EMPTY), ],","title":"Add to config/services.php."},{"location":"wechat-web/#5-usage","text":"Laravel docs on configuration You should now be able to use it like you would regularly use Socialite (assuming you have the facade installed): return Socialite::with('wechat_web')- redirect();","title":"5. Usage"},{"location":"wechat-web/#lumen-support","text":"You can use Socialite providers with Lumen. Just make sure that you have facade support turned on and that you follow the setup directions properly. Note: If you are using this with Lumen, all providers will automatically be stateless since Lumen does not keep track of state. Also, configs cannot be parsed from the services[] in Lumen. You can only set the values in the .env file as shown exactly in this document. If needed, you can also override a config (shown below).","title":"Lumen Support"},{"location":"wechat-web/#stateless","text":"You can set whether or not you want to use the provider as stateless. Remember that the OAuth provider (Twitter, Tumblr, etc) must support whatever option you choose. Note: If you are using this with Lumen, all providers will automatically be stateless since Lumen does not keep track of state. // to turn off stateless return Socialite::with('wechat_web')- stateless(false)- redirect(); // to use stateless return Socialite::with('wechat_web')- stateless()- redirect();","title":"Stateless"},{"location":"wechat-web/#overriding-a-config","text":"If you need to override the providers environment or config variables dynamically anywhere in your application, you may use the following: $clientId = secret ; $clientSecret = secret ; $redirectUrl = http://yourdomain.com/api/redirect ; $additionalProviderConfig = [ // Add additional configuration values here. ]; $config = new \\SocialiteProviders\\Manager\\Config( $clientId, $clientSecret, $redirectUrl, $additionalProviderConfig ); return Socialite::with('wechat_web')- setConfig($config)- redirect();","title":"Overriding a config"},{"location":"wechat-web/#retrieving-the-access-token-response-body","text":"Laravel Socialite by default only allows access to the access_token . Which can be accessed via the \\Laravel\\Socialite\\User- token public property. Sometimes you need access to the whole response body which may contain items such as a refresh_token . You can get the access token response body, after you called the user() method in Socialite, by accessing the property $user- accessTokenResponseBody ; // default use openid as $user- id $user = Socialite::driver('wechat_web')- user(); $accessTokenResponseBody = $user- accessTokenResponseBody; // use unionid as $user- id $user = Socialite::driver('wechat_web')- scopes('unionid')- user();","title":"Retrieving the Access Token Response Body"},{"location":"wechat-web/#retrieving-user-details-from-a-token-oauth2","text":"If you already have a valid access token for a user, you can retrieve their details using the userFromToken method, but Tencent breaks OAuth2, need set \"openid\" first: $user = Socialite::driver('wechat_web')- setOpenId($openId)- userFromToken($token);","title":"Retrieving User Details From A Token (OAuth2)"},{"location":"wechat-web/#reference_1","text":"Laravel Socialite Docs Laracasts Socialite video","title":"Reference"}]}